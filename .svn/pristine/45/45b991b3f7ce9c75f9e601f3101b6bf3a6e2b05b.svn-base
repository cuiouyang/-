package com.bsi.ms.service.impl;

import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bsi.ms.mapper.ProjectMilestoneMapper;
import com.bsi.ms.model.ProjectMilestone;
import com.bsi.ms.service.MilestoneService;

@Service
@Transactional
public class MilestoneServiceImpl implements MilestoneService {

	@Autowired
	ProjectMilestoneMapper mapper;
	
	protected static Logger logger = LogManager.getLogger(MilestoneServiceImpl.class);
	
	/**
	 * 通过项目id获取里程碑的第一级
	 * 
	 * @param id 
	 * 
	 * @return List<ProjectMilestone>
	 */
	@Override
	public List<ProjectMilestone> getMilestoneNameOne(String id) {
		logger.info("parameter:{}", id);
		List<ProjectMilestone> list = mapper.getMilestoneNameOne(id);
		logger.info("result:{}", list);
		return list;
	}
	
	/**
	 * 通过第一级里程碑的id获取里程碑的第二三四级
	 * 
	 * @param id 
	 * 
	 * @return List<ProjectMilestone>
	 */
	@Override
	public List<ProjectMilestone> getMilestoneName(String id) {
		logger.info("parameter:{}", id);
		List<ProjectMilestone> list = mapper.getMilestoneName(id);
		logger.info("result:{}", list);
		return list;
	}

	@Override
	public List<ProjectMilestone> getList(Map<String, Object> map) {
		return mapper.selectByProject(map);
	}

	@Override
	public ProjectMilestone selectByPrimaryKey(Integer id) {
		return mapper.selectByPrimaryKey(id);
	}

	@Override
	public int update(ProjectMilestone record) {
		return mapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public int insert(ProjectMilestone record) {
		return mapper.insertSelective(record);
	}

	@Override
	public int delete(Integer id) {
		return mapper.deleteByPrimaryKey(id);
	}

	@Override
	public int hasChild(Integer id) {
		return mapper.getChildCount(id);
	}

	@Override
	public void insertMilestone(Map<String, Object> prMap) {
		mapper.insertMilestone(prMap);
	}

	@Override
	public int getParentId(String milestoneId) {
		return mapper.getParentId(milestoneId);
	}

}
