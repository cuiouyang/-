package com.bsi.ms.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse; 

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.charts.TitleType;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.bsi.ms.model.Attachment;
import com.bsi.ms.model.Project;
import com.bsi.ms.model.ProjectMilestone;
import com.bsi.ms.model.User; 
import com.bsi.ms.service.MilestoneService;
import com.bsi.ms.service.ProjectService;
import com.bsi.ms.utils.DownloadUtils;
import com.bsi.ms.utils.FileUtils;
import com.bsi.ms.service.AttachmentService;

/**
 * @ClassName: MilestoneController
 * @Description:  里程碑controller业务 
 * @author wangxy
 * @date Mar 28, 2017 10:33:45 AM
 * 
 */
@Controller
@RequestMapping("/milestone")
public class MilestoneController extends BaseController {

   protected static Logger logger = LogManager.getLogger(MilestoneController.class);
	@Autowired
	private MilestoneService service;

	@Autowired
	private ProjectService pservice;
	@Autowired
	private AttachmentService attService;
	
	  @Value("#{settings['config.uploadPath']}")    
     public  String UPLOAD_PATH;   
	 
	private static final String SUCCESS = "SUCCESS";
	private static final String ERROR = "ERROR";
	 
	/** 
	* @Title:  里程碑-查询里程碑 
	* @author wangxy 
	* @param @param request
	* @param @param parameters
	* @param @param model
	* @param @return      
	* @return Object    返回类型  
	*/
	@RequestMapping(value = "list", method = { RequestMethod.GET, RequestMethod.POST })
	public Object list(HttpServletRequest request, @RequestParam MultiValueMap<String, String> parameters,
			ModelMap model) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, String> paramMap = parameters.toSingleValueMap();
		String pid = paramMap.get("pid");
		map.put("projectId", pid);
		String type = paramMap.get("type");
		if (type != null && type.length() > 0) {
			map.put("type", Integer.parseInt(type));
			String stime = paramMap.get("startDate");
			String etime = paramMap.get("endDate");
			if (stime != null && stime.length() > 0 && etime != null && etime.length() > 0) {
				map.put("startDate", stime);
				map.put("endDate", etime);
			} else {
				map.put("type", 0);
			}
		} else {
			map.put("type", 0);
		}
		model.addAttribute("pid", pid);

		List<ProjectMilestone> list = service.getList(map);
		model.addAttribute("list", list);
		String role = (String) request.getSession().getAttribute("role");// 获取并设置登录用户角色
		model.addAttribute("role", role);
		// int currentPage = paramMap.get("currentPage") == null ? 1 :
		// Integer.parseInt(paramMap.get("currentPage"));
		// List<Object> sub = new ArrayList<Object>(list);
		// Pager pager = new Pager(sub, currentPage);
		// return pager;
		return "milestone/list";
	}

	 
	/** 
	* @Title: 里程碑-异步查询里程碑 
	* @author wangxy 
	* @param @param parameters
	* @param @param model
	* @param @return      
	* @return List<ProjectMilestone>    返回类型  
	*/
	@RequestMapping(value = "/getlist", method = { RequestMethod.GET, RequestMethod.POST })
	@ResponseBody
	public List<ProjectMilestone> getlist(@RequestParam MultiValueMap<String, String> parameters, ModelMap model) {
		Map<String, String> request = parameters.toSingleValueMap();
		String pid = request.get("id");
		String type = request.get("type");
		String stime = request.get("startDate");
		String etime = request.get("endDate");
		Map<String, Object> map = new HashMap<String, Object>();

		int id = 1;
		if (pid != null && pid.length() > 0) {
			id = Integer.parseInt(pid);
		}
		map.put("projectId", id);
		map.put("type", Integer.parseInt(type));
		map.put("startDate", stime);
		map.put("endDate", etime);
		List<ProjectMilestone> list = service.getList(map);
		return list;
	}

	 
	/** 
	* @Title: 里程碑-新增一级里程碑 
	* @author wangxy 
	* @param @param request
	* @param @param response
	* @param @param model
	* @param @return      
	* @return ModelAndView    返回类型  
	*/
	@RequestMapping(value = "/addMain", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView addMain(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		model.addAttribute("type", 0);
		model.addAttribute("title", "新增一级里程碑");
		String pid = request.getParameter("pid");
		ProjectMilestone record = new ProjectMilestone();
		record.setProjectId(Integer.parseInt(pid));
		model.addAttribute("record", record);

		return new ModelAndView("milestone/edit", model);

	}

	 
	/** 
	* @Title:  里程碑-删除里程碑 
	* @author wangxy 
	* @param @param id
	* @param @return      
	* @return Object    返回类型  
	*/
	@RequestMapping(value = "/del")
	@ResponseBody
	public Object del(@RequestParam(value = "id") Integer id) {

		int count = service.hasChild(id);
		if (count > 0) {
			count = 501;
		} else {
			count = service.delete(id);
			if (count > 0) {
				count = 101;
			}
		}
		return count;
	}

	 
	/** 
	* @Title: 里程碑-新增下级里程碑 
	* @author wangxy 
	* @param @param request
	* @param @param response
	* @param @param id
	* @param @param model
	* @param @return      
	* @return ModelAndView    返回类型  
	*/
	@RequestMapping(value = "/add", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView add(HttpServletRequest request, HttpServletResponse response, Integer id, ModelMap model) {
		model.addAttribute("type", 1);

		ProjectMilestone record = service.selectByPrimaryKey(id);
		if (record != null) {
			Integer parentId = record.getId();
			Integer projectId = record.getProjectId();
			model.addAttribute("title", "新增【" + record.getMilestoneName() + "】下级里程碑");
			record = new ProjectMilestone();
			record.setParentId(parentId);
			record.setProjectId(projectId);
			model.addAttribute("record", record);
		}
		return new ModelAndView("milestone/edit", model);

	}

	 
	/** 
	* @Title: 里程碑-编辑下级里程碑 
	* @author wangxy 
	* @param @param request
	* @param @param response
	* @param @param id
	* @param @param model
	* @param @return      
	* @return ModelAndView    返回类型  
	*/
	@RequestMapping(value = "/edit", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView edit(HttpServletRequest request, HttpServletResponse response, Integer id, ModelMap model) {
		model.addAttribute("type", 2);
		ProjectMilestone record = service.selectByPrimaryKey(id);
		if (record != null) {
			model.addAttribute("title", "编辑里程碑");
			model.addAttribute("record", record);
		}
		return new ModelAndView("milestone/edit", model);
		// return "milestone/edit";
	}
	
	@RequestMapping(value = "/validate", method = { RequestMethod.GET, RequestMethod.POST })
	@ResponseBody
	public String validate(HttpServletRequest request, HttpServletResponse response,
			@RequestParam MultiValueMap<String, String> parameters) {
		Map<String, String> paramMap = parameters.toSingleValueMap();
		String name = paramMap.get("name");
		String type = paramMap.get("type");
		String parentId = paramMap.get("parentId"); 
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id",  paramMap.get("name"));
		map.put("name", name);
		map.put("type", type);
		map.put("parentId", parentId);
		map.put("projectId", paramMap.get("projectId"));
		Integer i = service.Validate(map);
		if(i==0)
		{
			return SUCCESS;
		}
		else
		{
			return ERROR;
		}
		 
		
	}

	/**
	 * @Title: 查看里程碑详情
	 * @author wangxy
	 * @param @param
	 *            request
	 * @param @param
	 *            id
	 * @param @param
	 *            model
	 * @param @return
	 * @return ModelAndView 返回类型
	 */
	@RequestMapping(value = "/index", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView index(HttpServletRequest request, ModelMap model) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		ProjectMilestone record = service.selectByPrimaryKey(id);
		if (record != null) {
			model.addAttribute("record", record);// 设置里程碑信息
			List<Attachment> list = attService.selectByMilestone(record.getMilestoneId());
			model.addAttribute("list", list);// 设置交付物信息

		}
		return new ModelAndView("milestone/info", model);

	}

	@RequestMapping(value = "/attachment", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView attachment(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		ProjectMilestone record = service.selectByPrimaryKey(id);
		if (record != null) {
			model.addAttribute("record", record);

		}
		return new ModelAndView("milestone/attachment", model);
		// return "milestone/edit";
	}

	/**
	 * @Title: 根据里程碑获取交付物信息
	 * @author wangxy
	 * @param @param
	 *            request
	 * @param @param
	 *            response
	 * @param @return
	 * @return List<Attachment> 返回类型 交付物列表
	 */
	@RequestMapping(value = "/getAtt", method = { RequestMethod.GET, RequestMethod.POST })
	@ResponseBody
	public List<Attachment> getAtt(HttpServletRequest request) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		ProjectMilestone record = service.selectByPrimaryKey(id);
		String milestoneId = "";
		if (record != null) {
			milestoneId = record.getMilestoneId();
		}
		List<Attachment> list = attService.selectByMilestone(milestoneId);
		return list;
	}

	@RequestMapping(value = "/editAtt", method = { RequestMethod.GET, RequestMethod.POST })
	@ResponseBody
	public Object editAtt(HttpServletRequest request, HttpServletResponse response) {
		String aid = request.getParameter("id");
		String attachmentName = request.getParameter("attachmentName");// 获取用户名
		if (aid != null && aid.length() > 0) {
			Integer id = Integer.parseInt(aid);
			Attachment record = new Attachment();
			record.setId(id);
			record.setAttachmentName(attachmentName);
			 
			attService.updateByPrimaryKeySelective(record);

		} else {
			Attachment record = new Attachment();
			String relatedId = request.getParameter("relatedId");// 获取用户名
			String projectId = request.getParameter("projectId");// 获取用户名
			record.setAttachmentName(attachmentName);
			record.setRelatedId(relatedId);
			record.setProjectId(Integer.parseInt(projectId));
			record.setType(0);
			  attService.insertSelective(record);
		}
		return "101";
	}
	
	@RequestMapping(value = "/delAtt")
	@ResponseBody
	public Object delAtt(@RequestParam(value = "id") Integer id) {

		 
			Integer  count = attService.deleteByPrimaryKey(id);
			if (count > 0) {
				return SUCCESS;
			}
			else
			{
				return ERROR;
			}
		 
		
	}

	/**
	 * @Title:里程碑-保存里程碑 @author wangxy @Description: (修改和添加里程碑) @param @param
	 *                  request @param @param record @param @param
	 *                  model @param @return @param @throws Exception
	 *                  设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping(value = "/edit/save", method = { RequestMethod.GET, RequestMethod.POST })
	public String save(HttpServletRequest request, ProjectMilestone record, Model model) throws Exception {

		// 获取表单数据
		int type = Integer.parseInt(request.getParameter("type"));
		User loginUser = (User) request.getSession().getAttribute("loginUser");
		String inChargeAccount = loginUser.getAccount();// 账户
		String loginUserName = loginUser.getName();// 获取密码
		record.setInChargeAccount(inChargeAccount);
		record.setInChargeName(loginUserName);
		Date curDate = new Date();
		int i = -1;
		try {

			// 不修改上级里程碑，只修改时间等参数信息
			if (type == 2) {
				// 修改时，更新修改人等信息
				int id = Integer.parseInt(request.getParameter("id"));
				record.setId(id);
				record.setUpdateTime(curDate);
				i = service.update(record);
			} else {
				record.setCreateTime(curDate);
				String milestoneId = getMilestoneId();// 新增时，获取uiid
				record.setMilestoneId(milestoneId);
				i = service.insert(record);
			
				if (i > 0) {
					// 创建里程碑目录，目录名取引用ID名
					String path = request.getSession().getServletContext().getRealPath("upload");
					Project project = pservice.selectByPrimaryKey(record.getProjectId());
					if (project != null) {
						File targetFile = new File(path, project.getSeriaNo() + "//" + milestoneId); // 创建项目目录
						if (!targetFile.exists()) {
							targetFile.mkdirs();
						}
					}
				}
			}
		} catch (DataAccessException ex) {
			logger.error("保存里程碑错误：{}", ex.getMessage());
		}

		if (i > 0) {
			return "redirect:/milestone/list?pid=" + record.getProjectId();
		} else {
			return "redirect:/milestone/list?pid=" + record.getProjectId();
		}

	}

	/**
	 * 上传交付物文件
	 * @param file
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/upload.do", method = { RequestMethod.GET,RequestMethod.POST })
	@ResponseBody 
	public String upload(HttpServletRequest request) throws Exception {

		String path = this.UPLOAD_PATH;// 上传文件路径
		// 根据里程碑获取项目文件名，暂时直接处理
	   String aid=request.getParameter("id");
		String milestoneNo =  request.getParameter("mid");
		Integer pid = Integer.parseInt(request.getParameter("pid"));
        String localPath=""; 
			//获取交付物路径
         Project project = pservice.selectByPrimaryKey(pid);
		if (project != null) {
				
			localPath = project.getSeriaNo() + "/" + milestoneNo; 
		} 
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile file = multipartRequest.getFile("attachFileName");//文件名词
		if (file == null) {
			logger.error("上传失败：文件为空");
		   return ERROR;
		}
		String fileName= file.getOriginalFilename();
		try {
			logger.info("上传文件：项目路径--{},文件--{}", localPath,fileName);
		   // 保存文件 
			FileUtils.saveFile(file.getInputStream(), path+"/"+localPath+"/"+fileName);
			
			localPath=localPath+"/"+fileName; 
			
			if(aid != null && aid.length() > 0)//id值大于0时，保存数据
			{
			
				Integer id = Integer.parseInt(aid);
				Attachment record =new Attachment();
				record.setId(id); //更新文件路径
				record.setAttachmentUrl(localPath);
				User loginUser = (User) request.getSession().getAttribute("loginUser");
				record.setCreatorAccount(loginUser.getAccount());
				logger.info("更新交付物信息：交付物--{}",record.toString());
				attService.updateByPrimaryKeySelective(record);
			} 
			return SUCCESS;
			 
		} catch (IOException ex) {
			logger.error("上传文件错误：{}", ex.getMessage());
			return ERROR;
		}
		

	}

	@RequestMapping("download.do")    
	public void download(HttpServletRequest request,HttpServletResponse response) throws IOException {
		  
		String filePath=request.getParameter("path"); //文件路径
		String fileName=FileUtils.getFileName(filePath);//文件名
		filePath=this.UPLOAD_PATH+"/"+filePath;//实际路径
		logger.info("下载文件：{}", filePath);
		 DownloadUtils.download(response, filePath, fileName); //直接下载文件
                
	}
	/**
	 * @Title:解析里程碑导入
	 * @param request
	 * @param record
	 * @param model
	 * @param response
	 * @return
	 * @author wenhao
	 */
	@SuppressWarnings("resource")
	@ResponseBody
	@RequestMapping(value = "/resolve/milestone", method = { RequestMethod.GET, RequestMethod.POST }) 
	public String  resolveMilestoneExcel(HttpServletRequest request, Project record, Model model,HttpServletResponse response){
		//获取对应项目的ID
		String projectId = request.getParameter("pid");
		//定义一个父ID
	    int parentIdFirst = 0 ;
	    int parentIdSecond = 0 ;
	    int parentIdThird = 0 ;
	    String milestoneId;
	    int rowNum =0;
		String fileType = request.getParameter("fileType") == null ? "xlsx" : request.getParameter("fileType");
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile imgFile1 = multipartRequest.getFile("uploadMilestone");
		String fileName = imgFile1.getOriginalFilename();
		if (fileName.lastIndexOf(".") > 0) {
			fileName = fileName.substring(0, fileName.lastIndexOf("."));
		}
		if (imgFile1 ==null || imgFile1.isEmpty()) {
			return ERROR;
		}
		logger.info("开始解析:{}",fileName+"."+fileType);
		//HSSF提供读写Microsoft Excel XLS格式档案的功能。
		//XSSF提供读写Microsoft Excel OOXML XLSX格式档案的功能
		//Excel的文档对象
		 if (fileType.equalsIgnoreCase("xls")) {
			 HSSFWorkbook hssfWorkbook = null;
			try {
				hssfWorkbook = new HSSFWorkbook(imgFile1.getInputStream());
				HSSFSheet st = hssfWorkbook.getSheetAt(0);
				logger.info("有效行:{}",st.getLastRowNum());
				//取有效行
				 for (int rowNumOfSheet = 1; rowNumOfSheet <= st.getLastRowNum();rowNumOfSheet++) {
					if (st.getRow(rowNumOfSheet) != null) {
						HSSFRow hssfRow = st.getRow(rowNumOfSheet);
						//用来存储每一行的信息
						 if (hssfRow.getCell(0) != null && !hssfRow.getCell(0).toString().isEmpty()) {
							 rowNum = 0 ;
							 milestoneId = getMilestoneId();
							 saveMilestone(projectId, hssfRow,rowNum,milestoneId,0);
							 parentIdFirst = service.getParentId(milestoneId);
							 insertAtt(hssfRow, milestoneId,projectId);
							 continue;
						 } else if (hssfRow.getCell(1) != null && !hssfRow.getCell(1).toString().isEmpty()) {
							 rowNum = 1 ;
							 milestoneId = getMilestoneId();
							 saveMilestone(projectId, hssfRow, rowNum, milestoneId, parentIdFirst);
							 parentIdSecond = service.getParentId(milestoneId);
							 insertAtt(hssfRow, milestoneId,projectId);
							 continue;
						 } else if(hssfRow.getCell(2) != null && !hssfRow.getCell(2).toString().isEmpty()){
							 rowNum = 2 ;
							 milestoneId = getMilestoneId();
							 saveMilestone(projectId, hssfRow, rowNum, milestoneId, parentIdSecond);
							 parentIdThird = service.getParentId(milestoneId);
							 insertAtt(hssfRow, milestoneId,projectId);
							 continue;
						 }else{
							 rowNum = 3 ;
							 milestoneId = getMilestoneId();
							 saveMilestone(projectId, hssfRow, rowNum, milestoneId, parentIdThird);
							 insertAtt(hssfRow, milestoneId,projectId);
							 continue;
						 }
					}
				 }
			} catch (IOException e) {
				logger.error("导入里程碑失败:{}",e);
			}
			
		 } else if(fileType.equalsIgnoreCase("xlsx")) {
			 XSSFWorkbook xssfWorkbook = null;
			 try {
				 xssfWorkbook= new XSSFWorkbook(imgFile1.getInputStream());
				 XSSFSheet at = xssfWorkbook.getSheetAt(0);
				 logger.info("有效行:{}",at.getLastRowNum());
				 for (int rowNumOfSheet = 1 ; rowNumOfSheet <= at.getLastRowNum(); rowNumOfSheet++) {
					 if (at.getRow(rowNumOfSheet) != null){
						 XSSFRow xssfRow = at.getRow(rowNumOfSheet);
							//用来存储每一行的信息
							 if (xssfRow.getCell(0) != null && !xssfRow.getCell(0).toString().isEmpty()) {
								 rowNum = 0;
								 milestoneId = getMilestoneId();
								 saveMilestone(projectId, xssfRow, rowNum, milestoneId, 0);
								 parentIdFirst = service.getParentId(milestoneId);
								 insertAtt(xssfRow, milestoneId,projectId);
								 continue;
							 } else if (xssfRow.getCell(1) != null && !xssfRow.getCell(1).toString().isEmpty()) {
								 milestoneId = getMilestoneId();
								 rowNum = 1;
								 saveMilestone(projectId, xssfRow,rowNum, milestoneId, parentIdFirst);
								 parentIdSecond = service.getParentId(milestoneId);
								 insertAtt(xssfRow, milestoneId,projectId);
								 continue;
							 } else if(xssfRow.getCell(2) != null && !xssfRow.getCell(2).toString().isEmpty()){
								 rowNum =2 ;
								 milestoneId = getMilestoneId();
								 saveMilestone(projectId, xssfRow, rowNum, milestoneId, parentIdSecond);
								 parentIdThird = service.getParentId(milestoneId);
								 insertAtt(xssfRow, milestoneId,projectId);
								 continue;
							 }else if(xssfRow.getCell(3) != null && !xssfRow.getCell(3).toString().isEmpty()){
								 rowNum = 3 ;
								 milestoneId = getMilestoneId();
								 saveMilestone(projectId, xssfRow, rowNum, milestoneId, parentIdThird);
								 insertAtt(xssfRow,milestoneId,projectId);
							 }
					 	}
					 }
			} catch (IOException e) {
				logger.error("导入里程碑失败:{}",e);
				return ERROR;
			}
			 
		 }else {
			 return ERROR;
		 }
		 return SUCCESS;
	}
	
	/**
	 * 生成UUID
	 * @return
	 */
	private String getMilestoneId() {
		return UUID.randomUUID().toString().replaceAll("-", "");
	}
	
	/**
	 * 将导入的数据新增到里程碑表
	 * @param projectId
	 * @param object
	 * @param rowNum
	 * @param milestoneId
	 * @param parentId
	 * @author wenhao
	 * 
	 */
	private void saveMilestone(String projectId, Object object, int rowNum, String milestoneId, int parentId) {
		Map<String,Object> prMap = new HashMap<String , Object>();
		if(object instanceof HSSFRow){
			HSSFRow hssfRow = (HSSFRow)object;
			prMap.put("milestone_name", getHssfCellValue(hssfRow.getCell(rowNum)));//里程碑阶段
			prMap.put("plan_start_date", getHssfCellValue(hssfRow.getCell(6)));//计划开始时间
			prMap.put("plan_end_date", getHssfCellValue(hssfRow.getCell(7)));//计划结束时间
			prMap.put("plan_hours", getHssfCellValue(hssfRow.getCell(8)));//计划工时
			prMap.put("in_charge_name", getHssfCellValue(hssfRow.getCell(9)));//负责人
			prMap.put("milestone_id", milestoneId);
			prMap.put("project_id", projectId);
			if(parentId ==0){
				prMap.put("parent_id", null);//上级ID
			}else{
				prMap.put("parent_id", parentId);//上级ID
			}
			logger.info("里程碑{}级标题：{}",rowNum+1,prMap);
			service.insertMilestone(prMap);
		}else{
			XSSFRow xssfRow = (XSSFRow)object;
			prMap.put("milestone_name", getxssfCellValue(xssfRow.getCell(rowNum)));//里程碑阶段
		    prMap.put("plan_start_date", getxssfCellValue(xssfRow.getCell(6)));//计划开始时间
		    prMap.put("plan_end_date", getxssfCellValue(xssfRow.getCell(7)));//计划结束时间
		    prMap.put("plan_hours", getxssfCellValue(xssfRow.getCell(8)));//计划工时
		    prMap.put("in_charge_name", getxssfCellValue(xssfRow.getCell(9)));//负责人
		    prMap.put("milestone_id", milestoneId);
		    prMap.put("project_id", projectId);
		    if(parentId ==0){
				prMap.put("parent_id", null);//上级ID
			}else{
				prMap.put("parent_id", parentId);//上级ID
			}
		    logger.info("里程碑{}级标题：{}",rowNum+1,prMap);
		    service.insertMilestone(prMap);
		}
	}
	
	/**
	 * 
	 * 更新交付物表
	 * 
	 * @param xssfRow
	 * 
	 * @param milestoneId
	 * 
	 * @author wenhao
	 */
	private void insertAtt(Object object, String milestoneId,String projectId) {
		if (object instanceof XSSFRow) {
			XSSFRow xssfRow = (XSSFRow) object;
			for (int i = 10; i < 15; i++) {
				 if (!getxssfCellValue(xssfRow.getCell(i)).isEmpty()) {
					Map<String,Object> attMap = new HashMap<String, Object>();
					attMap.put("attachment_name", getxssfCellValue(xssfRow.getCell(i)));
					attMap.put("related_id", milestoneId);
					attMap.put("project_id", projectId);
					attMap.put("type", "0");
					attService.insertAttachment(attMap);
				 }
			}
		}else if(object instanceof HSSFRow){
			HSSFRow hssfRow = (HSSFRow)object;
			 for (int i = 10; i < 15; i++) {
				 if (!getHssfCellValue(hssfRow.getCell(i)).isEmpty()) {
					Map<String,Object> attMap = new HashMap<String, Object>();
					attMap.put("attachment_name", getHssfCellValue(hssfRow.getCell(i)));
					attMap.put("related_id", milestoneId);
					attMap.put("type", "0");
					attService.insertAttachment(attMap);
				 }
			}
		}
	}

	/**
	 * xlsx格式，根据单元格不同属性返回字符串数值
	 * 
	 * @param xssfCell
	 * 
	 * @return
	 * 
	 * @author wenhao
	 */
	@SuppressWarnings("static-access")
	public String  getxssfCellValue (XSSFCell xssfCell) {
		SimpleDateFormat smd = new SimpleDateFormat("yyyy-MM-dd");
		DecimalFormat f = new DecimalFormat();
		if (xssfCell.getCellType() == xssfCell.CELL_TYPE_BOOLEAN) {
			  return String.valueOf(xssfCell.getBooleanCellValue());
		} else if (xssfCell.getCellType() == xssfCell.CELL_TYPE_NUMERIC) {
			if(HSSFDateUtil.isCellDateFormatted(xssfCell)){
				return smd.format(xssfCell.getDateCellValue());
			}
			  return f.format(xssfCell.getNumericCellValue());
		} else if (xssfCell.getCellType() == xssfCell.CELL_TYPE_STRING) {
			  return String.valueOf(xssfCell.getStringCellValue());
		} else {
			return "";
		}
	}
	
	
	/**
	 * xls格式，根据单元格不同属性返回字符串数值
	 * 
	 * @param hssfCell
	 * 
	 * @return
	 * 
	 * @author wenhao
	 */
	public String  getHssfCellValue (HSSFCell hssfCell) {
		SimpleDateFormat smd = new SimpleDateFormat("yyyy-MM-dd");
		DecimalFormat f = new DecimalFormat();
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
			  return String.valueOf(hssfCell.getBooleanCellValue());
			
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			if(HSSFDateUtil.isCellDateFormatted(hssfCell)){
				return smd.format(hssfCell.getDateCellValue());
			}
			  return f.format(hssfCell.getNumericCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_STRING) {
			  return String.valueOf(hssfCell.getStringCellValue());
		} else {
			return "";
		}
	}
}
