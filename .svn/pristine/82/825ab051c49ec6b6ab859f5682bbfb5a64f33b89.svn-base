package com.bsi.ms.controller;
 
  
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import com.bsi.ms.model.Project;
import com.bsi.ms.model.ProjectMilestone;
import com.bsi.ms.service.AttachmentService;
import com.bsi.ms.service.MilestoneService;
import com.bsi.ms.service.ProjectService;
 

/** 
* @ClassName: MilestoneController 
* @Description: (里程碑controller业务) 
* @author wangxy
* @date Mar 28, 2017 10:33:45 AM 
*  
*/
@Controller
@RequestMapping("/milestone") 
public class MilestoneController  extends BaseController   {

	public final static Logger logger = Logger.getLogger(MilestoneController.class);
	@Autowired
	private MilestoneService service;
	
	@Autowired
	private ProjectService pservice;
	
	@Autowired
	private AttachmentService attService;
	// 里程碑-查询里程碑
	@RequestMapping(value = "list", method = { RequestMethod.GET, RequestMethod.POST })
	public Object list(HttpServletRequest request,
			@RequestParam MultiValueMap<String, String> parameters, ModelMap model) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, String> paramMap = parameters.toSingleValueMap();	
		 String pid=paramMap.get("pid");
		map.put("projectId", pid);
		 String type=paramMap.get("type");
		 if(type!=null&&type.length() > 0)
		 {
			 map.put("type", Integer.parseInt(type));
			  String stime = paramMap.get("startDate");
				String etime = paramMap.get("endDate");
				 if(stime!=null&&stime.length() > 0&&etime!=null&&etime.length() > 0)
				 {
				map.put("startDate", stime);
				map.put("endDate", etime);
				 }
				 else
				 {
					 map.put("type", 0);
				 }
		 }
		 else
		 {
			 map.put("type", 0);
		 } 
			model.addAttribute("pid", pid); 
		
		List<ProjectMilestone> list = service.getList(map);  
		model.addAttribute("list", list); 
		
		//int currentPage = paramMap.get("currentPage") == null ? 1 : Integer.parseInt(paramMap.get("currentPage"));
		//List<Object> sub = new ArrayList<Object>(list);
		//Pager pager = new Pager(sub, currentPage);
		//return pager;
		return "milestone/list";
	}

	// 里程碑-异步查询里程碑
	@RequestMapping(value = "/getlist", method = { RequestMethod.GET, RequestMethod.POST })
	@ResponseBody
	public  List<ProjectMilestone> getlist(@RequestParam MultiValueMap<String, String> parameters, ModelMap model) {
		Map<String, String> request = parameters.toSingleValueMap();	
		String pid = request.get("id");
		String type = request.get("type");
		String stime = request.get("startDate");
		String etime = request.get("endDate");
		Map<String, Object> map = new HashMap<String, Object>();
		 
		 int id=1;
		 if(pid!=null&&pid.length() > 0)
		 {
			 id=Integer.parseInt(pid);
		 }
		map.put("projectId", id);
		map.put("type", Integer.parseInt(type));
		map.put("startDate", stime);
		map.put("endDate", etime);
		List<ProjectMilestone> list = service.getList(map);
		return list;
	}

	// 里程碑-新增一级里程碑
	@RequestMapping(value = "/addMain", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView addMain(HttpServletRequest request,HttpServletResponse response, ModelMap model) {
		model.addAttribute("type", 0);  
		model.addAttribute("title", "新增一级里程碑"); 
		String pid=request.getParameter("pid");
		ProjectMilestone record=new ProjectMilestone();
		record.setProjectId(Integer.parseInt(pid));
		model.addAttribute("record", record);
		
		return new ModelAndView("milestone/edit",model);
		 
	}
	
	// 里程碑-新增一级里程碑
		@RequestMapping(value = "/del")
		@ResponseBody
		public  String del(@RequestParam(value = "id") Integer id) {
			   
			  String msg="操作错误";
				 int count=service.hasChild(id);
				 if(count>0)
				 {
					 msg="包含下级里程碑，请先删除下级里程碑";
				 }
				 else
				 {
					 count=service.delete(id);
					 if(count>0)
					 {
						 msg="Success";
					 }
				 } 
			return msg;
		}

	// 里程碑-新增下级里程碑
	@RequestMapping(value = "/add", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView add(HttpServletRequest request,HttpServletResponse response, Integer id, ModelMap model) {
		model.addAttribute("type", 1); 
		
		ProjectMilestone record = service.selectByPrimaryKey(id);
		if (record != null) {
			Integer parentId=record.getId(); 
			Integer projectId=record.getProjectId(); 
			model.addAttribute("title", "新增【"+record.getMilestoneName()+"】下级里程碑"); 
			record=new ProjectMilestone();
			record.setParentId(parentId);
			record.setProjectId(projectId);
			model.addAttribute("record", record);
		}
		return new ModelAndView("milestone/edit",model);
		 
	}

	// 里程碑-编辑下级里程碑
	@RequestMapping(value = "/edit", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView edit(HttpServletRequest request,HttpServletResponse response, Integer id, ModelMap model) {
		model.addAttribute("type", 2); 
		ProjectMilestone record = service.selectByPrimaryKey(id);
		if (record != null) {
			model.addAttribute("title", "编辑里程碑"); 
			model.addAttribute("record", record);
		} 
		return new ModelAndView("milestone/edit",model);
		//return "milestone/edit";
	}

	// 里程碑-保存里程碑
	@RequestMapping(value = "/edit/save", method = { RequestMethod.GET, RequestMethod.POST }) 
	public String save(HttpServletRequest request, ProjectMilestone record, Model model) throws Exception{
		
		 
		// 获取表单数据
		int type = Integer.parseInt(request.getParameter("type"));    
		HttpSession session = request.getSession();
		String inChargeAccount=session.getAttribute("loginUserAccount").toString();//账户
	    String loginUserName=session.getAttribute("loginUserName").toString();//获取密码
	    record.setInChargeAccount(inChargeAccount);
		record.setInChargeName(loginUserName);
	    Date curDate = new Date();
		 int i = -1;
		// 不修改上级里程碑，只修改时间等参数信息
		if (type == 2){
			//修改时，更新修改人等信息
			int id = Integer.parseInt(request.getParameter("id"));  
			record.setId(id);
			record.setUpdateTime(curDate);
			i = service.update(record);
		} else {
			record.setCreateTime(curDate);
			 String milestoneId = UUID.randomUUID().toString();//新增时，获取uiid 
			 record.setMilestoneId(milestoneId);  
			i = service.insert(record);
			if(i>0){
				//创建里程碑目录，目录名取引用ID名
				 String path = request.getSession().getServletContext().getRealPath("upload");  
				 Project project=pservice.selectByPrimaryKey(record.getProjectId());
				 if(project!=null){
				      File targetFile = new File(path,project.getSeriaNo()+"//"+ milestoneId);  //创建项目目录
				      if(!targetFile.exists()){  
				            targetFile.mkdirs();  
				      } 
				 }
			}
		}
		
		if(i>0){
			return "redirect:/milestone/list?pid="+record.getProjectId();
		}
		else{
			return "redirect:/milestone/list?pid="+record.getProjectId();
		} 

	}
	
	@RequestMapping(value = "/upload.do", method = {  RequestMethod.POST }) 
	@ResponseBody
	public String upload(@RequestParam(value = "file", required = false) MultipartFile file,HttpServletRequest request, Model model) throws Exception{
		
		String path = request.getSession().getServletContext().getRealPath("upload");  
        String fileName = file.getOriginalFilename();  
        //根据里程碑获取项目文件名，暂时直接处理
        Integer id=Integer.parseInt(request.getParameter("id"));
        
        if(id>0)
        {
        	ProjectMilestone milestone=service.selectByPrimaryKey(id);
        	if(milestone!=null)
        	{
        		Project project=pservice.selectByPrimaryKey(milestone.getId());
        		path=Paths.get(path, project.getSeriaNo(), milestone.getMilestoneNo(), fileName).toString();  
        		 
        	}
        }
        
        
        File targetFile = new File(path);  
        if(!targetFile.exists()){  
            targetFile.mkdirs();  
        }  
  
        //保存  
        try {  
            file.transferTo(targetFile);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        model.addAttribute("file", request.getContextPath()+"/upload/"+fileName);  
  
        return "Success";   

	}
	
	/**
	 * 解析上传的Excel
	 * @author wenhao
	 * @return 
	 */
	@SuppressWarnings("resource")
	@ResponseBody
	@RequestMapping(value = "/resolve/milestone", method = { RequestMethod.GET, RequestMethod.POST }) 
	public String  resolveMilestoneExcel(HttpServletRequest request, Project record, Model model,HttpServletResponse response){
		String SUCCESS ="success";
		String ERROR = "error";
		//获取对应项目的ID
		String projectId = request.getParameter("pid");
		//定义一个一级父ID
	    int parentIdFirst = 0 ;
	    //定义一个二级父ID
	    int parentIdSecond = 0;
	    String milestoneId;
		String fileType = request.getParameter("fileType") == null ? "xlsx" : request.getParameter("fileType");
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile imgFile1 = multipartRequest.getFile("uploadMilestone");
		String fileName = imgFile1.getOriginalFilename();
		if (fileName.lastIndexOf(".") > 0) {
			fileName = fileName.substring(0, fileName.lastIndexOf("."));
		}
		if (imgFile1 ==null || imgFile1.isEmpty()) {
			return ERROR;
		}
		logger.info("开始解析:"+fileName);
		//HSSF提供读写Microsoft Excel XLS格式档案的功能。
		//XSSF提供读写Microsoft Excel OOXML XLSX格式档案的功能
		//Excel的文档对象
		 if (fileType.equalsIgnoreCase("xls")) {
			 HSSFWorkbook hssfWorkbook = null;
			try {
				hssfWorkbook = new HSSFWorkbook(imgFile1.getInputStream());
				HSSFSheet st = hssfWorkbook.getSheetAt(0);
				logger.info("有效行："+st.getLastRowNum());
				 for (int rowNumOfSheet = 1; rowNumOfSheet <= st.getLastRowNum();rowNumOfSheet++) {//取有效行
					if (st.getRow(rowNumOfSheet) != null) {
						HSSFRow hssfRow = st.getRow(rowNumOfSheet);
						 Map<String,Object> prMap = new HashMap<String , Object>();//用来存储每一行的信息
						 if (hssfRow.getCell(0) != null && !hssfRow.getCell(0).toString().isEmpty()) {
								 milestoneId = UUID.randomUUID().toString().replaceAll("-", "");
								 prMap.put("milestone_name", getHssfCellValue(hssfRow.getCell(0)));//里程碑阶段
								 prMap.put("plan_start_date", getHssfCellValue(hssfRow.getCell(6)));//计划开始时间
								 prMap.put("plan_end_date", getHssfCellValue(hssfRow.getCell(7)));//计划结束时间
								 prMap.put("plan_hours", getHssfCellValue(hssfRow.getCell(8)));//计划工时
								 prMap.put("in_charge_name", getHssfCellValue(hssfRow.getCell(9)));//负责人
								 prMap.put("milestone_id", milestoneId);
								 prMap.put("project_id", projectId);
								 prMap.put("parent_id", null);//上级ID
								 logger.debug("里程碑一级标题："+prMap);
								 service.insertMilestone(prMap);
								 parentIdFirst = service.getParentId(milestoneId);
								 logger.info("一级父ID："+parentIdFirst);
							 continue;
						 } else if (hssfRow.getCell(1) != null && !hssfRow.getCell(1).toString().isEmpty()) {
								 milestoneId = UUID.randomUUID().toString().replaceAll("-", "");
								 prMap.put("milestone_name", getHssfCellValue(hssfRow.getCell(1)));//里程碑阶段
								 prMap.put("plan_start_date", getHssfCellValue(hssfRow.getCell(6)));//计划开始时间
								 prMap.put("plan_end_date", getHssfCellValue(hssfRow.getCell(7)));//计划结束时间
								 prMap.put("plan_hours", getHssfCellValue(hssfRow.getCell(8)));//计划工时
								 prMap.put("in_charge_name", getHssfCellValue(hssfRow.getCell(9)));//负责人
								 prMap.put("milestone_id",milestoneId);
								 prMap.put("project_id", projectId);
								 prMap.put("parent_id", parentIdFirst);//上级ID
								 logger.debug("里程碑二级标题："+prMap);
								 service.insertMilestone(prMap);
								 parentIdSecond = service.getParentId(milestoneId);
								 logger.info("二级父ID："+parentIdSecond);
								 continue;
						 } else {
								 milestoneId = UUID.randomUUID().toString().replaceAll("-", "");
								 prMap.put("milestone_name", getHssfCellValue(hssfRow.getCell(2)));//里程碑阶段
								 prMap.put("plan_start_date", getHssfCellValue(hssfRow.getCell(6)));//计划开始时间
								 prMap.put("plan_end_date", getHssfCellValue(hssfRow.getCell(7)));//计划结束时间
								 prMap.put("plan_hours", getHssfCellValue(hssfRow.getCell(8)));//计划工时
								 prMap.put("in_charge_name", getHssfCellValue(hssfRow.getCell(9)));//负责人
								 prMap.put("milestone_id", milestoneId);
								 prMap.put("project_id", projectId);
								 prMap.put("parent_id", parentIdSecond);//上级ID
								 service.insertMilestone(prMap);
								 logger.debug("里程碑三级标题："+prMap);
								 continue;
						 }
					}
				 }
			} catch (IOException e) {
				logger.error("导入里程碑失败："+e);
			}
			
		 }else if(fileType.equalsIgnoreCase("xlsx")){
			 XSSFWorkbook xssfWorkbook = null;
			 try {
				 xssfWorkbook= new XSSFWorkbook(imgFile1.getInputStream());
				 XSSFSheet at = xssfWorkbook.getSheetAt(0);
				 logger.info("有效行："+at.getLastRowNum());
				 for(int rowNumOfSheet = 1 ; rowNumOfSheet <= at.getLastRowNum(); rowNumOfSheet++){
					 if(at.getRow(rowNumOfSheet) != null){
						 XSSFRow xssfRow = at.getRow(rowNumOfSheet);
							 Map<String,Object> prMap = new HashMap<String , Object>();//用来存储每一行的信息
							 if(xssfRow.getCell(0) != null && !xssfRow.getCell(0).toString().isEmpty()){
								 milestoneId = UUID.randomUUID().toString().replaceAll("-", "");
								 prMap.put("milestone_name", getxssfCellValue(xssfRow.getCell(0)));//里程碑阶段
								 prMap.put("plan_start_date", getxssfCellValue(xssfRow.getCell(6)));//计划开始时间
								 prMap.put("plan_end_date", getxssfCellValue(xssfRow.getCell(7)));//计划结束时间
								 prMap.put("plan_hours", getxssfCellValue(xssfRow.getCell(8)));//计划工时
								 prMap.put("in_charge_name", getxssfCellValue(xssfRow.getCell(9)));//负责人
								 prMap.put("milestone_id", milestoneId);
								 prMap.put("project_id", projectId);
								 prMap.put("parent_id", null);//上级ID
								 logger.debug("里程碑一级标题："+prMap);
								 service.insertMilestone(prMap);
								 parentIdFirst = service.getParentId(milestoneId);
								 insertAtt(xssfRow, milestoneId);
								 continue;
							 }else if(xssfRow.getCell(1) != null && !xssfRow.getCell(1).toString().isEmpty()){
								 milestoneId = UUID.randomUUID().toString().replaceAll("-", "");
								 prMap.put("milestone_name", getxssfCellValue(xssfRow.getCell(1)));//里程碑阶段
								 prMap.put("plan_start_date", getxssfCellValue(xssfRow.getCell(6)));//计划开始时间
								 prMap.put("plan_end_date", getxssfCellValue(xssfRow.getCell(7)));//计划结束时间
								 prMap.put("plan_hours", getxssfCellValue(xssfRow.getCell(8)));//计划工时
								 prMap.put("in_charge_name", getxssfCellValue(xssfRow.getCell(9)));//负责人
								 prMap.put("milestone_id",milestoneId);
								 prMap.put("project_id", projectId);
								 prMap.put("parent_id", parentIdFirst);//上级ID
								 logger.debug("里程碑二级标题："+prMap);
								 service.insertMilestone(prMap);
								 parentIdSecond = service.getParentId(milestoneId);
								 insertAtt(xssfRow, milestoneId);
								 continue;
							 }else{
								 milestoneId = UUID.randomUUID().toString().replaceAll("-", "");
								 prMap.put("milestone_name", getxssfCellValue(xssfRow.getCell(2)));//里程碑阶段
								 prMap.put("plan_start_date", getxssfCellValue(xssfRow.getCell(6)));//计划开始时间
								 prMap.put("plan_end_date", getxssfCellValue(xssfRow.getCell(7)));//计划结束时间
								 prMap.put("plan_hours", getxssfCellValue(xssfRow.getCell(8)));//计划工时
								 prMap.put("in_charge_name", getxssfCellValue(xssfRow.getCell(9)));//负责人
								 prMap.put("milestone_id", milestoneId);
								 prMap.put("project_id", projectId);
								 prMap.put("parent_id", parentIdSecond);//上级ID
								 service.insertMilestone(prMap);
								 insertAtt(xssfRow,milestoneId);
								 logger.debug("里程碑三级标题："+prMap);
							 }
						 }
					 }
			} catch (IOException e) {
				logger.error("导入里程碑失败:{}",e);
				return ERROR;
			}
			 
		 }else {
			 return ERROR;
		 }
		 return SUCCESS;
	}
	
	
	private void insertAtt(XSSFRow xssfRow, String milestoneId) {
		 for (int i = 10; i < 15; i++) {
			 if (!getxssfCellValue(xssfRow.getCell(i)).isEmpty()) {
				Map<String,Object> attMap = new HashMap<String, Object>();
				attMap.put("attachment_name", getxssfCellValue(xssfRow.getCell(i)));
				attMap.put("related_id", milestoneId);
				attMap.put("type", "0");
				attService.insertAttachment(attMap);
			 }
		}
	}

	/**
	 * xlsx格式，根据单元格不同属性返回字符串数值
	 * @param xssfCell
	 * @return
	 */
	@SuppressWarnings("static-access")
	public String  getxssfCellValue (XSSFCell xssfCell) {
		SimpleDateFormat smd = new SimpleDateFormat("yyyy-MM-dd");
		DecimalFormat f = new DecimalFormat();
		if (xssfCell == null || xssfCell.equals("")) {
			  return "";
		} else if (xssfCell.getCellType() == xssfCell.CELL_TYPE_BOOLEAN) {
			  return String.valueOf(xssfCell.getBooleanCellValue());
			
		} else if (xssfCell.getCellType() == xssfCell.CELL_TYPE_NUMERIC) {
			if(HSSFDateUtil.isCellDateFormatted(xssfCell)){
				return smd.format(xssfCell.getDateCellValue());
			}
			  return f.format(xssfCell.getNumericCellValue());
			
		} else if (xssfCell.getCellType() == xssfCell.CELL_TYPE_STRING) {
			  return String.valueOf(xssfCell.getStringCellValue());
		} else {
			
			return "";
		}
	}
	
	
	/**
	 * xls格式，根据单元格不同属性返回字符串数值
	 * @param hssfCell
	 * @return
	 */
	public String  getHssfCellValue (HSSFCell hssfCell) {
		SimpleDateFormat smd = new SimpleDateFormat("yyyy-MM-dd");
		DecimalFormat f = new DecimalFormat();
		if (hssfCell == null || hssfCell.equals("")) {
			  return "";
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
			  return String.valueOf(hssfCell.getBooleanCellValue());
			
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			if(HSSFDateUtil.isCellDateFormatted(hssfCell)){
				return smd.format(hssfCell.getDateCellValue());
			}
			  return f.format(hssfCell.getNumericCellValue());
			
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_STRING) {
			  return String.valueOf(hssfCell.getStringCellValue());
		} else {
			
			return "";
		}
	}
}

